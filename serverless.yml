org: alxblsk
app: aws-redone-vote
service: aws-redone-vote
frameworkVersion: "2"
variablesResolutionMode: 20210326
useDotenv: true

provider:
  name: aws
  region: us-west-1
  memorySize: 128
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [votesTable, Arn]

functions:
  init:
    handler: src/votes.init
    provisionedConcurrency: 1
    environment:
      TABLE_NAME: ${self:custom.vars.TABLE_NAME}
      AWS_VOTES_REGION: ${self:custom.vars.AWS_VOTES_REGION, ''}
      AWS_VOTES_ENDPOINT: ${self:custom.vars.AWS_VOTES_ENDPOINT, ''}
    events:
      - http:
          path: api/v1/votes/{id}
          method: post
          cors:
            origin: ${self:custom.vars.WEBSITE_ORIGIN}
          request:
            parameters:
              paths:
                id: true
  vote:
    handler: src/votes.vote
    provisionedConcurrency: 1
    environment:
      TABLE_NAME: ${self:custom.vars.TABLE_NAME}
      AWS_VOTES_REGION: ${self:custom.vars.AWS_VOTES_REGION, ''}
      AWS_VOTES_ENDPOINT: ${self:custom.vars.AWS_VOTES_ENDPOINT, ''}
    events:
      - http:
          path: api/v1/votes/{id}
          method: patch
          cors:
            origin: ${self:custom.vars.WEBSITE_ORIGIN}
          request:
            parameters:
              paths:
                id: true
  list:
    handler: src/votes.list
    provisionedConcurrency: 1
    environment:
      TABLE_NAME: ${self:custom.vars.TABLE_NAME}
      AWS_VOTES_REGION: ${self:custom.vars.AWS_VOTES_REGION, ''}
      AWS_VOTES_ENDPOINT: ${self:custom.vars.AWS_VOTES_ENDPOINT, ''}
    events:
      - http:
          path: api/v1/votes/{id}
          method: get
          cors:
            origin: ${self:custom.vars.WEBSITE_ORIGIN}
          request:
            parameters:
              paths:
                id: true

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  vars: ${file(configs.js)}
  serverless-offline:
    httpPort: 3010
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 10m
      heapMax: 20m
      migrate: true
      seed: false
      convertEmptyValues: false

resources:
  Resources:
    votesTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain 
      Properties:
        TableName: ${self:custom.vars.TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: articleId
            AttributeType: S
        KeySchema:
          - AttributeName: articleId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

package:
  patterns:
    - '!.dynamodb/**'